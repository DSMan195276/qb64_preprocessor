
' MEM handling functions
FUNCTION MEM_get_str$ (s AS MEM_string)
$CHECKING:OFF
IF s.is_allocated <> 0 AND s.length > 0 THEN
  get_s$ = space$(s.length)
  MEM_MEMCPY _OFFSET(get_s$), s.mem, s.length
  'FOR x = 1 TO s.length
  '  get_s$ = get_s$ + _MEMGET(MEM_FAKEMEM, s.mem + x - 1, STRING * 1)
  'NEXT x
END IF
MEM_get_str$ = get_s$
$CHECKING:ON
END FUNCTION

SUB MEM_put_str (s AS MEM_string, stri$)
$CHECKING:OFF
IF NOT s.is_allocated OR s.allocated < LEN(stri$) THEN
  IF s.is_allocated THEN MEM_FREE s.mem '_MEMFREE s.mem
  's.mem = _MEMNEW(LEN(stri$) + 10) 'allocate 10 extra bytes
  s.mem = MEM_MALLOC%&(LEN(stri$) + 10)
  s.allocated = LEN(stri$) + 10
  s.is_allocated = -1
END IF
'_MEMPUT s.mem, s.mem.OFFSET, stri$
MEM_MEMCPY s.mem, _OFFSET(stri$), len(stri$)
s.length = LEN(stri$)
$CHECKING:ON
END SUB

FUNCTION MEM_get_str_array$ (a AS MEM_array, array_number)
DIM s AS MEM_string
$CHECKING:OFF
'_MEMGET MEM_FAKEMEM, a.mem + array_number * MEM_SIZEOF_MEM_STRING, s
MEM_MEMCPY _OFFSET(s), a.mem + array_number * MEM_SIZEOF_MEM_STRING, MEM_SIZEOF_MEM_STRING
'_MEMCOPY a.mem, a.mem.OFFSET + array_number * LEN(string_type), LEN(string_type) TO m, m.OFFSET
$CHECKING:ON

MEM_get_str_array$ = MEM_get_str$(s)
END FUNCTION

SUB MEM_increment_array (a as MEM_array)
'debug_output "Incrementing array..."
a.last_element = a.last_element + 1
if a.last_element > a.length - 1 then
  MEM_reallocate_array a, a.length + 100
end if
END SUB

SUB MEM_put_mem_copy_array (a as MEM_array, array_num, o as _OFFSET)
$CHECKING:OFF
MEM_MEMCPY a.mem + array_number * a.element_size, o, a.element_Size
$CHECKING:ON
END SUB

SUB MEM_put_str_array (a AS MEM_array, array_number, s$)
$CHECKING:OFF
DIM st as MEM_string
'_MEMGET MEM_FAKEMEM, a.mem + array_number * MEM_SIZEOF_MEM_STRING, st
MEM_MEMCPY _OFFSET(st), a.mem + array_number * MEM_SIZEOF_MEM_STRING, MEM_SIZEOF_MEM_STRING
MEM_put_str st, s$
MEM_MEMCPY a.mem + array_number * MEM_SIZEOF_MEM_STRING, _OFFSET(st), MEM_SIZEOF_MEM_STRING
'_MEMPUT a.mem, a.mem.OFFSET + array_number * MEM_SIZEOF_MEM_STRING, st

$CHECKING:ON
END SUB

SUB MEM_allocate_array (a AS MEM_array, number_of_elements, element_size)
$CHECKING:OFF
IF NOT a.is_allocated THEN
  'not already allocated
  a.element_size = element_size
  a.length = number_of_elements 'add one to make it go from 0 to number_of_elements as BASIC programers would expect
  a.is_allocated = -1
  a.allocated = (a.length + 1) * element_size
  'a.mem = _MEMNEW((a.length + 1) * element_size)
  a.mem = MEM_MALLOC%&((a.length + 1) * element_size)
  MEM_MEMSET a.mem, 0, (a.length + 1) * element_size
  
  '_MEMFILL a.mem, a.mem.OFFSET, (a.length + 1) * element_size, 0 as _byte
elseif a.element_size = element_size then
  MEM_reallocate_array a, number_of_elements
END IF
$CHECKING:ON

END SUB

SUB MEM_reallocate_array (a AS MEM_array, number_of_elements)

DIM temp AS _OFFSET, k as LONG

$CHECKING:OFF
IF a.is_allocated = 0 THEN
  IF a.element_size > 0 THEN MEM_allocate_array a, number_of_elements, a.element_size ELSE ERROR 255
ELSE 'reallocate
  'debug_output "Reallocating..."
  a.length = number_of_elements + 1
  'debug_output "Increased length"
  IF a.length * a.element_size < a.allocated THEN EXIT SUB
  'debug_output "Allocated: " + str$(a.allocated)
  'debug_output "Calling REALLOC: " + STR$(a.allocated)
  'debug_output "MEM: " + str$(a.mem) + str$(a.length * a.element_size)
  
  temp = MEM_MALLOC0(a.length * a.element_size)
  'debug_output "Allocated temp" + str$(temp) + str$(a.allocated)
  if a.mem <> 0 then 
    MEM_MEMCPY temp, a.mem, a.allocated
  '  debug_output "Copied a.mem" + str$(a.mem)
    MEM_FREE a.mem
  end if
  'debug_output "Freed a.mem"
  a.mem = temp
  'a.mem = MEM_REALLOC%&(a.mem, a.allocated + 1)
  'debug_output "Alloc" 
  a.allocated = a.length * a.element_size
END IF

$CHECKING:ON
END SUB

SUB MEM_allocate_string_array (a as MEM_array, number_of_elements)
MEM_allocate_array a, number_of_elements, MEM_SIZEOF_MEM_STRING
END SUB

SUB MEM_allocate_define_array (a as MEM_array, number_of_elements)
MEM_allocate_array a, number_of_elements, SIZEOF_DEFINE 
END SUB

SUB MEM_add_string_to_array (a AS MEM_array, s$)
if a.length = 0 then a.element_size = MEM_SIZEOF_MEM_STRING 
'debug_output "Adding String"
MEM_increment_array a
'debug_output "Writing string to array"
MEM_put_str_array a, a.last_element, s$
END SUB

SUB MEM_free_string_array (a as MEM_array)
DIM s as MEM_string
$CHECKING:OFF
if a.is_allocated then
  FOR x = 1 to a.length 'Free each individual string
    's = _MEMGET(a.mem, a.mem.OFFSET + MEM_SIZEOF_MEM_STRING * (x - 1), MEM_string)
    MEM_MEMCPY _OFFSET(s), a.mem + MEM_SIZEOF_MEM_STRING * (x - 1), MEM_SIZEOF_MEM_STRING
    MEM_free_string s
  next x
  '_MEMFREE a.mem
  MEM_FREE a.mem
  a.is_allocated = 0
  a.allocated = 0
  a.last_element = 0
end if
$CHECKING:ON
END SUB

SUB MEM_free_array (a as MEM_array)
$CHECKING:OFF
if a.is_allocated then
  '_MEMFREE a.mem
  MEM_FREE a.mem
  a.is_allocated = 0
  a.allocated = 0
  a.last_element = 0
end if
$CHECKING:ON
END SUB

SUB MEM_free_string (s as MEM_string)
$CHECKING:OFF
if s.is_allocated then
  '_memfree s.mem
  MEM_FREE s.mem
  s.is_allocated = 0
  s.allocated = 0
end if
$CHECKING:on
END SUB

FUNCTION MEM_int_from_off% (o as _OFFSET)
$checking:off
DIM i as INTEGER
MEM_MEMCPY _OFFSET(i), o, LEN(i)
MEM_int_from_off% = i
$checking:on
END FUNCTION

FUNCTION MEM_long_from_off& (o as _OFFSET)
$checking:off
DIM l as LONG
MEM_MEMCPY _OFFSET(l), o, 4 'LEN(l)
MEM_long_from_off& = l
$checking:on
END FUNCTION

FUNCTION MEM_byte_from_off%% (o as _OFFSET)
$checking:off
DIM b as _byte
MEM_MEMCPY _OFFSET(b), o, LEN(b)
MEM_byte_from_off%% = b
$checking:on
END FUNCTION

FUNCTION MEM_int64_from_off&& (o as _OFFSET)
$checking:off
DIM i as _INTEGER64
MEM_MEMCPY _OFFSET(i), o, LEN(i)
MEM_ini64_from_off&& = i
$checking:on
END FUNCTION

FUNCTION MEM_MALLOC0%& (bytes as LONG)
$CHECKING:OFF
DIM o as _OFFSET
o = MEM_MALLOC%&(bytes)
MEM_MEMSET o, 0, bytes
MEM_MALLOC0%& = o
$CHECKING:ON
END FUNCTION

